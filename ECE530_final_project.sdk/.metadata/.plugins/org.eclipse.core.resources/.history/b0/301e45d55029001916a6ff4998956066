/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_io.h"
#include "xil_printf.h"
#include "xparameters.h"
#define ImgH 30
#define ImgW 25
#define IMG_SIZE ImgH*ImgW
#define MSB_MASK 1000000000000000000000000

void open_img(void) {
    FILE    *fp;
    char    buf[32768]; //Maximum 32K
    int    i, size;
    fp = fopen("img/yoshi.png", "rb");
    //fp = fopen("./yoshi.png", "rb");
    if(fp != NULL) {
        while(size = fread( buf, sizeof(unsigned char), 32768, fp )) {
            //for(i = 0 ; i < size ; i++) {
            //    printf("%c", buf[i]);
            for(i =0; i<size; i++) {
              Xil_Out32(XPAR_BRAM_0_BASEADDR + 4*i, (MSB_MASK|buf[i])); //33554431=0x1FFFFFF;
            }
        }
        fclose(fp);
    } else print("Failed to file open\n");
}

int main()
{
    init_platform();

    print("Hello World\n\r");
    //printf("Content-type: image/jpeg\n\n");
    print("Content-type: yoshi.png\n\n");
    open_img();

  //for(int i =0; i<IMG_SIZE; i++)
  //  Xil_Out32(XPAR_BRAM_0_BASEADDR + 4*i, 33554431); //33554431=0x1FFFFFF;
  //  Xil_Out32(XPAR_BRAM_0_BASEADDR + 4, 345);
  //  uint32_t result = 0;
  //  result = Xil_In32(XPAR_BRAM_0_BASEADDR + 0);
  //  xil_printf("BRAM[0] = %d\r\n", result);
  //  result = Xil_In32(XPAR_BRAM_0_BASEADDR + 4);
  //  xil_printf("BRAM[799] = %d\r\n", result);
  //  result = Xil_In32(XPAR_BRAM_0_BASEADDR + 799*4);

    cleanup_platform();
    return 0;
}
